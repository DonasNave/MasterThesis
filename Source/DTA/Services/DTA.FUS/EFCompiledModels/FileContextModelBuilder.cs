// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace DTA.FUS.EFCompiledModels
{
    public partial class FileContextModel
    {
        partial void Initialize()
        {
            var fileModel = FileModelEntityType.Create(this);

            FileModelEntityType.CreateAnnotations(fileModel);

            AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            AddAnnotation("ProductVersion", "8.0.3");
            AddAnnotation("Relational:MaxIdentifierLength", 63);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var fileModel = FindEntityType("DTA.Models.Files.FileModel")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            fileModel.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var dTAModelsFilesFileModelTableBase = new TableBase("DTA.Models.Files.FileModel", null, relationalModel);
            var contentColumnBase = new ColumnBase<ColumnMappingBase>("Content", "bytea", dTAModelsFilesFileModelTableBase);
            dTAModelsFilesFileModelTableBase.Columns.Add("Content", contentColumnBase);
            var fileNameColumnBase = new ColumnBase<ColumnMappingBase>("FileName", "text", dTAModelsFilesFileModelTableBase);
            dTAModelsFilesFileModelTableBase.Columns.Add("FileName", fileNameColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "integer", dTAModelsFilesFileModelTableBase);
            dTAModelsFilesFileModelTableBase.Columns.Add("Id", idColumnBase);
            relationalModel.DefaultTables.Add("DTA.Models.Files.FileModel", dTAModelsFilesFileModelTableBase);
            var dTAModelsFilesFileModelMappingBase = new TableMappingBase<ColumnMappingBase>(fileModel, dTAModelsFilesFileModelTableBase, true);
            dTAModelsFilesFileModelTableBase.AddTypeMapping(dTAModelsFilesFileModelMappingBase, false);
            defaultTableMappings.Add(dTAModelsFilesFileModelMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, fileModel.FindProperty("Id")!, dTAModelsFilesFileModelMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)contentColumnBase, fileModel.FindProperty("Content")!, dTAModelsFilesFileModelMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)fileNameColumnBase, fileModel.FindProperty("FileName")!, dTAModelsFilesFileModelMappingBase);

            var tableMappings = new List<TableMapping>();
            fileModel.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var filesTable = new Table("Files", null, relationalModel);
            var idColumn = new Column("Id", "integer", filesTable);
            filesTable.Columns.Add("Id", idColumn);
            idColumn.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var contentColumn = new Column("Content", "bytea", filesTable);
            filesTable.Columns.Add("Content", contentColumn);
            var fileNameColumn = new Column("FileName", "text", filesTable);
            filesTable.Columns.Add("FileName", fileNameColumn);
            var pK_Files = new UniqueConstraint("PK_Files", filesTable, new[] { idColumn });
            filesTable.PrimaryKey = pK_Files;
            var pK_FilesUc = RelationalModel.GetKey(this,
                "DTA.Models.Files.FileModel",
                new[] { "Id" });
            pK_Files.MappedKeys.Add(pK_FilesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_FilesUc).Add(pK_Files);
            filesTable.UniqueConstraints.Add("PK_Files", pK_Files);
            relationalModel.Tables.Add(("Files", null), filesTable);
            var filesTableMapping = new TableMapping(fileModel, filesTable, true);
            filesTable.AddTypeMapping(filesTableMapping, false);
            tableMappings.Add(filesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, fileModel.FindProperty("Id")!, filesTableMapping);
            RelationalModel.CreateColumnMapping(contentColumn, fileModel.FindProperty("Content")!, filesTableMapping);
            RelationalModel.CreateColumnMapping(fileNameColumn, fileModel.FindProperty("FileName")!, filesTableMapping);
            return relationalModel.MakeReadOnly();
        }
    }
}
