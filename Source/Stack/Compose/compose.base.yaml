version: '3.7'

volumes:
  grafana_storage:
  prometheus_data:
  postgres:
  pgadmin:


networks:
  stack-network:


services:
  proxy:
    image: nginx:alpine
    restart: always
    container_name: proxy
    ports:
      - "10000:10000"
    networks:
      stack-network:


  data-visualization:
    image: "grafana/grafana"
    container_name: data-visualization
    depends_on:
      metrics-monitor:
        condition: service_healthy
    restart: unless-stopped
    environment:
      - GF_LOG_LEVEL=debug
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
    ports:
      - "3000:3000"
    volumes:
      - ./compose/grafana-provisioning:/etc/grafana/provisioning
    networks:
      stack-network:


  metrics-monitor:
    image: prom/prometheus:latest
    container_name: metrics-monitor
    volumes:
      - ./Monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.enable-remote-write-receiver"
    ports:
      - "9090:9090"
    networks:
      stack-network:


  logs-monitor:
    image: grafana/loki
    container_name: logs-monitor
    volumes:
      - ./Monitoring/loki.yaml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    networks:
      stack-network:


  traces-monitor:
    image: grafana/tempo
    container_name: traces-monitor
    volumes:
      - ./Monitoring/tempo.yaml:/:/etc/tempo.yaml
    command: [ "-config.file=/etc/tempo.yaml" ]
    ports:
      - "3200:3100"
    networks:
      stack-network:


  otel-collector:
    image: otel/opentelemetry-collector-contrib
    hostname: otel-collector
    container_name: otel-collector
    command: --config=/etc/otel-collector-config.yaml
    volumes:
      - ./Monitoring/otel.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "4317:4317"
    networks:
      stack-network:


  database:
    container_name: postgre_db
    image: postgres/postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      stack-network:
    restart: unless-stopped

  database-client:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@admin.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      stack-network:
    restart: unless-stopped

  stack-monitor:
    container_name: stack-monitor
    image: amir20/dozzle:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8080:8080"
    environment:
      DOZZLE_LEVEL: trace
    healthcheck:
      test: [ "CMD", "/dozzle", "healthcheck" ]
      interval: 3s
      timeout: 30s
      retries: 5
      start_period: 30s
    networks:
      stack-network:
