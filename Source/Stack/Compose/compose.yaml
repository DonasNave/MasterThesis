version: '3.7'

volumes:
  grafana_data:
  otel_data:
  prometheus_data:
  postgres:

networks:
  stack-network:
  
services:
  srs-jit-service:
    image: dta-srs:jit-latest
    container_name: srs-jit-service
    build:
      context: ../../DTA
      dockerfile: Services/DTA.SRS/Dockerfile-JIT
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    environment:
      - "DTA_JIT_SRS_Logging__LogLevel__Default=Debug"
      - "DTA_JIT_SRS_Logging__LogLevel__OpenTelemetry=Debug"
      - "DTA_JIT_SRS_OpenTelemetrySettings__ExporterEndpoint=http://otel-lgtm:4317"
    ports:
      - "12001:8080"
    depends_on:
      otel-lgtm:
        condition: service_started
    networks:
      - stack-network

  fus-jit-service:
    image: dta-fus:jit-latest
    container_name: fus-jit-service
    build:
      context: ../../DTA
      dockerfile: Services/DTA.FUS/Dockerfile-JIT
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    environment:
      - "DTA_JIT_FUS_Logging__LogLevel__Default=Debug"
      - "DTA_JIT_FUS_Logging__LogLevel__OpenTelemetry=Debug"
      - "DTA_JIT_FUS_OpenTelemetrySettings__ExporterEndpoint=http://otel-lgtm:4317"
      - "DTA_JIT_FUS_ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=FUS;Username=postgres;Password=postgres;"
    ports:
      - "12002:8080"
      - "12102:8081"
    depends_on:
      postgres:
        condition: service_healthy
      otel-lgtm:
        condition: service_started
    networks:
      - stack-network

  eps-jit-service:
    image: dta-eps:jit-latest
    container_name: eps-jit-service
    build:
      context: ../../DTA
      dockerfile: Services/DTA.EPS/Dockerfile-JIT
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    environment:
      - "DTA_JIT_EPS_Logging__LogLevel__Default=Debug"
      - "DTA_JIT_EPS_Logging__LogLevel__OpenTelemetry=Debug"
      - "DTA_JIT_EPS_OpenTelemetrySettings__ExporterEndpoint=http://otel-lgtm:4317"
      - "DTA_JIT_EPS_RabbitMQ__HostName=rabbitmq"
    ports:
      - "12003:8080"
    depends_on:
      otel-lgtm:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks:
      - stack-network

  bps-jit-service:
    image: dta-bps:jit-latest
    container_name: bps-jit-service
    build:
      context: ../../DTA
      dockerfile: Services/DTA.BPS/Dockerfile-JIT
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    environment:
      - "DTA_JIT_BPS_Logging__LogLevel__Default=Debug"
      - "DTA_JIT_BPS_Logging__LogLevel__OpenTelemetry=Debug"
      - "DTA_JIT_BPS_OpenTelemetrySettings__ExporterEndpoint=http://otel-lgtm:4317"
      - "DTA_JIT_BPS_RabbitMQ__HostName=rabbitmq"
      - "DTA_JIT_BPS_ServiceConnections__FusHttp2=http://fus-jit-service:8081"
    ports:
      - "12004:8080"
    depends_on:
      otel-lgtm:
        condition: service_started
      rabbitmq:
        condition: service_healthy
      fus-jit-service:
        condition: service_healthy
    networks:
      - stack-network

  # fus-aot-service:
  #   image: dta-fus:aot-latest
  #   container_name: fus-aot-service
  #   build:
  #     context: ../../DTA
  #     dockerfile: Services/DTA.FUS/Dockerfile-AOT
  #   ports:
  #     - "12002:8080"
  #   environment:
  #     - "DTA_AOT_FUS_Logging__LogLevel__Default=Debug"
  #     - "DTA_AOT_FUS_Logging__LogLevel__OpenTelemetry=Debug"
  #     - "DTA_AOT_FUS_OpenTelemetrySettings__ExporterEndpoint=http://otel-lgtm:4317"
  #     - "DTA_AOT_FUS_ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=FUS;Username=postgres;Password=postgres;"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   networks:
  #     - stack-network

  # srs-aot-service:
  #   image: dta-srs:aot-latest
  #   container_name: srs-aot-service
  #   build:
  #     context: ../../DTA
  #     dockerfile: Services/DTA.SRS/Dockerfile-AOT
  #   ports:
  #     - "12001:8080"
  #   environment:
  #     - "DTA_AOT_SRS_Logging__LogLevel__Default=Debug"
  #     - "DTA_AOT_SRS_Logging__LogLevel__OpenTelemetry=Debug"
  #     - "DTA_AOT_SRS_OpenTelemetrySettings__ExporterEndpoint=http://otel-lgtm:4317"
  #   networks:
  #     - stack-network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    ports:
        - 15672:15672
        - 5672:5672
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - stack-network

  otel-lgtm:
    # build:
    #   context: ../../Tools/LGTM
    #   dockerfile: ./Dockerfile
    image: donasnave/dta-lgtm:latest
    container_name: otel-lgtm
    ports:
        - 4317:4317
    volumes:
      - otel_data:/otel-lgtm/data
      - grafana_data:/otel-lgtm/grafana-v10.4.1
      - prometheus_data:/otel-lgtm/prometheus-2.51.0
      - ./configuration/grafana-provisioning/dashboards:/etc/grafana/provisioning/dashboards
    environment:
      - GF_SERVER_ROOT_URL=http://localhost/grafana/
      - GF_AUTH_ANONYMOUS_ENABLED=true
    restart: unless-stopped
    networks:
      - stack-network

  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      - stack-network

  proxy:
    image: nginx:alpine
    restart: always
    container_name: proxy
    ports:
      - "80:80"
    volumes:
      - ./configuration/proxy/nginx.conf:/etc/nginx/nginx.conf
      - ./configuration/proxy/www:/usr/share/nginx/html/custom 
    networks:
      stack-network: