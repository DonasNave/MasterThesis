volumes:
  grafana_data:
  otel_data:
  prometheus_data:
  postgres:
  influxdb:

networks:
  stack-network:
    driver: bridge
  
services:

################
# JIT Services #
################

  srs-jit-service:
    image: dta-srs:jit-latest
    container_name: srs-jit-service
    build:
      context: ../../DTA
      dockerfile: Services/DTA.SRS/Dockerfile-JIT
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    environment:
      - "DTA_JIT_SRS_Logging__LogLevel__Default=Debug"
      - "DTA_JIT_SRS_Logging__LogLevel__OpenTelemetry=Debug"
      - "DTA_JIT_SRS_OpenTelemetrySettings__ExporterEndpoint=http://otel-lgtm:4317"
    ports:
      - "12001:8080"
    depends_on:
      otel-lgtm:
        condition: service_started
    networks:
      - stack-network
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 400M
        reservations:
          cpus: '0.25'
          memory: 200M

  fus-jit-service:
    image: dta-fus:jit-latest
    container_name: fus-jit-service
    build:
      context: ../../DTA
      dockerfile: Services/DTA.FUS/Dockerfile-JIT
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    environment:
      - "DTA_JIT_FUS_Logging__LogLevel__Default=Debug"
      - "DTA_JIT_FUS_Logging__LogLevel__OpenTelemetry=Debug"
      - "DTA_JIT_FUS_OpenTelemetrySettings__ExporterEndpoint=http://otel-lgtm:4317"
      - "DTA_JIT_FUS_ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=FUS-JIT;Username=postgres;Password=postgres;"
    ports:
      - "12002:8080"
      - "12102:8081"
    depends_on:
      postgres:
        condition: service_healthy
      otel-lgtm:
        condition: service_started
    networks:
      - stack-network
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 400M
        reservations:
          cpus: '0.25'
          memory: 200M

  eps-jit-service:
    image: dta-eps:jit-latest
    container_name: eps-jit-service
    build:
      context: ../../DTA
      dockerfile: Services/DTA.EPS/Dockerfile-JIT
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    environment:
      - "DTA_JIT_EPS_Logging__LogLevel__Default=Debug"
      - "DTA_JIT_EPS_Logging__LogLevel__OpenTelemetry=Debug"
      - "DTA_JIT_EPS_OpenTelemetrySettings__ExporterEndpoint=http://otel-lgtm:4317"
      - "DTA_JIT_EPS_RabbitMQ__HostName=rabbitmq"
      - "DTA_AOT_EPS_RabbitMQ__QueueGroup=jit"
    ports:
      - "12003:8080"
    depends_on:
      otel-lgtm:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks:
      - stack-network
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 400M
        reservations:
          cpus: '0.25'
          memory: 200M

  bps-jit-service:
    image: dta-bps:jit-latest
    container_name: bps-jit-service
    build:
      context: ../../DTA
      dockerfile: Services/DTA.BPS/Dockerfile-JIT
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    environment:
      - "DTA_JIT_BPS_Logging__LogLevel__Default=Debug"
      - "DTA_JIT_BPS_Logging__LogLevel__OpenTelemetry=Debug"
      - "DTA_JIT_BPS_OpenTelemetrySettings__ExporterEndpoint=http://otel-lgtm:4317"
      - "DTA_JIT_BPS_RabbitMQ__HostName=rabbitmq"
      - "DTA_AOT_BPS_RabbitMQ__QueueGroup=jit"
      - "DTA_JIT_BPS_ServiceConnections__FusHttp2=http://fus-jit-service:8081"
    ports:
      - "12004:8080"
    depends_on:
      otel-lgtm:
        condition: service_started
      rabbitmq:
        condition: service_started
      fus-jit-service:
        condition: service_healthy
    networks:
      - stack-network
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 400M
        reservations:
          cpus: '0.25'
          memory: 200M

################
# AOT Services #
################

  srs-aot-service:
    image: dta-srs:aot-latest
    container_name: srs-aot-service
    build:
      context: ../../DTA
      dockerfile: Services/DTA.SRS/Dockerfile-AOT
    ports:
      - "13001:8080"
    environment:
      - "DTA_AOT_SRS_Logging__LogLevel__Default=Debug"
      - "DTA_AOT_SRS_Logging__LogLevel__OpenTelemetry=Debug"
      - "DTA_AOT_SRS_OpenTelemetrySettings__ExporterEndpoint=http://otel-lgtm:4317"
    networks:
      - stack-network
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 400M
        reservations:
          cpus: '0.25'
          memory: 200M

  fus-aot-service:
    image: dta-fus:aot-latest
    container_name: fus-aot-service
    build:
      context: ../../DTA
      dockerfile: Services/DTA.FUS/Dockerfile-AOT
    ports:
      - "13002:8080"
      - "13102:8081"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - "DTA_AOT_SRS_Logging__LogLevel__Default=Debug"
      - "DTA_AOT_SRS_Logging__LogLevel__OpenTelemetry=Debug"
      - "DTA_AOT_SRS_ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=FUS-AOT;Username=postgres;Password=postgres;"
    networks:
      - stack-network
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 400M
        reservations:
          cpus: '0.25'
          memory: 200M

  eps-aot-service:
    image: dta-eps:aot-latest
    container_name: eps-aot-service
    build:
      context: ../../DTA
      dockerfile: Services/DTA.EPS/Dockerfile-AOT
    environment:
      - "DTA_AOT_EPS_Logging__LogLevel__Default=Debug"
      - "DTA_AOT_EPS_Logging__LogLevel__OpenTelemetry=Debug"
      - "DTA_AOT_EPS_OpenTelemetrySettings__ExporterEndpoint=http://otel-lgtm:4317"
      - "DTA_AOT_EPS_RabbitMQ__HostName=rabbitmq"
      - "DTA_AOT_EPS_RabbitMQ__QueueGroup=aot"
    ports:
      - "13003:8080"
    depends_on:
      otel-lgtm:
        condition: service_started
      rabbitmq:
        condition: service_started
    networks:
      - stack-network
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 400M
        reservations:
          cpus: '0.25'
          memory: 200M

  bps-aot-service:
    image: dta-bps:aot-latest
    container_name: bps-aot-service
    build:
      context: ../../DTA
      dockerfile: Services/DTA.BPS/Dockerfile-AOT
    environment:
      - "DTA_AOT_BPS_Logging__LogLevel__Default=Debug"
      - "DTA_AOT_BPS_Logging__LogLevel__OpenTelemetry=Debug"
      - "DTA_AOT_BPS_OpenTelemetrySettings__ExporterEndpoint=http://otel-lgtm:4317"
      - "DTA_AOT_BPS_RabbitMQ__HostName=rabbitmq"
      - "DTA_AOT_BPS_RabbitMQ__QueueGroup=aot"
      - "DTA_AOT_BPS_ServiceConnections__FusHttp2=http://fus-aot-service:8081"
    ports:
      - "13004:8080"
    depends_on:
      otel-lgtm:
        condition: service_started
      rabbitmq:
        condition: service_started
      fus-aot-service:
        condition: service_started
    networks:
      - stack-network
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 400M
        reservations:
          cpus: '0.25'
          memory: 200M

##################
# Infrastructure #
##################

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    ports:
        - 15672:15672
        - 5672:5672
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - stack-network

  otel-lgtm:
    build:
      context: ../../Tools/LGTM
      dockerfile: ./Dockerfile
    #image: donasnave/dta-lgtm:latest
    container_name: otel-lgtm
    ports:
        - 4317:4317
    volumes:
      - otel_data:/otel-lgtm/data
      - grafana_data:/otel-lgtm/grafana-v10.4.1
      - prometheus_data:/otel-lgtm/prometheus-2.51.0
    environment:
      - GF_SERVER_ROOT_URL=http://localhost/grafana/
      - GF_AUTH_ANONYMOUS_ENABLED=true
    restart: unless-stopped
    depends_on:
      influxdb:
        condition: service_started
    networks:
      - stack-network

  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      - stack-network

  influxdb:
    image: influxdb:1.8.10
    container_name: influxdb
    ports:
      - "8086:8086"
    environment:
      INFLUXDB_DB: k6
      INFLUXDB_HTTP_AUTH_ENABLED: 'true'
      INFLUXDB_ADMIN_USER: dta
      INFLUXDB_ADMIN_PASSWORD: dtapass
    volumes:
      - influxdb:/var/lib/influxdb
    networks:
      - stack-network

  proxy:
    image: nginx:alpine
    restart: always
    container_name: proxy
    ports:
      - "80:80"
    volumes:
      - ./configuration/proxy/nginx.conf:/etc/nginx/nginx.conf
      - ./configuration/proxy/www:/usr/share/nginx/html/custom 
    networks:
      - stack-network